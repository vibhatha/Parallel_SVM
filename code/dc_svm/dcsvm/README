Given training data {x_1, ..., x_n} and labels {y_1, ..., y_n}, 
our goal is to solve the following dual problem of kernel SVM: 

min 1/2 alpha^T Q alpha - sum_{i=1}^n alpha_i 
st  0 <= alpha_i <= C, forall i=1,...,n

where Q is a n by n matrix with Q_{ij} = y_i y_j K(x_i, x_j) and 
K( , ) is the kernel function. We consider the following 2 kernel
functions: 

Gaussian kernel: K(x_i, x_j) = exp(-gamma*||x_i-x_j||^2)
polynomial kernel: K(x_i, x_j) = (gamma*u'*v + 1)^degree

===========================
Compile and Run the program
===========================

1. To compile the program, please go to ../libsvm-3.14-nobias/matlab folder, 
   and type "make" in the matlab environment. 

2. Prepare the data: you can either use ijcnn1 to test the program or prepare
   other datasets as follow: 
   
   Download the data from http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/
   for example, download covtype.libsvm.binary.scale.bz2 into data/ folder, 
   and unzip the file. 

3. Run DC-SVM: 
   
   in dcsvm folder, run demo_ijcnn.m or demo_covtype.m in the matlab environment. 


===============
Functionalities
===============

We recommend the following easy-to-use procedures, which usually achieves high test 
accuracy and fast training time. All the following functions are our proposed algorithms. 

Training an approximated rbf SVM: a faster way to compute approximate solution. 
[model] = dcsvm_rbf_train(trainy, trainX, C, gamma, ncluster)

 Arguments:
 trainy       training labels, an n by 1 matrix.  
 trainX       training data, an n by d matrix, each row is a data point. 
 C            the balancing parameter in SVM
 gamma        the kernel parameter for Gaussian kernel
              K(x,y) = exp(-gamma*||x-y||_2^2)
 ncluster     number of clusters 

Training an exact rbf SVM: a slower way but get accurate solution
[model] = dcsvm_rbf_train_exact(trainy, trainX, C, gamma)

 Arguments:
 trainy       training labels, an n by 1 matrix.  
 trainX       training data, an n by d matrix, each row is a data point. 
 C            the balancing parameter in SVM
 gamma        the kernel parameter for Gaussian kernel
              K(x,y) = exp(-gamma*||x-y||_2^2)

Training an approximate polynomial kernel SVM: 

 [model] = dcsvm_poly_train(trainy, trainX, C, gamma, degree, ncluster)

 Arguments:
 trainy       training labels, an n by 1 matrix.  
 trainX       training data, an n by d matrix, each row is a data point. 
 C            the balancing parameter in SVM
 gamma        the kernel parameter for polynomial kernel
 degree       the kernel parameter for polynomial kernel
              K(x,y) = (gamma*u'*v + 1)^degree
 ncluster     number of clusters 

Training an exact polynomial kernel SVM: 

 [model] = dcsvm_poly_train_exact(trainy, trainX, C, gamma, degree)

 Arguments:
 trainy       training labels, an n by 1 matrix.  
 trainX       training data, an n by d matrix, each row is a data point. 
 C            the balancing parameter in SVM
 gamma        the kernel parameter for polynomial kernel
 degree       the kernel parameter for polynomial kernel
              K(x,y) = (gamma*u'*v + 1)^degree

Prediction using a DCSVM model: 

 [labels decision_values] = dcsvm_test(testy, testX)

 Input Arguments: 
 testy     testing labels, an n by 1 matrix. 
 testX     testing data, an n by d matrix, each row is a data point. 
 model     the DCSVM model generated by dcsvm_train

======================
The main DC-SVM solver
======================

For advance users who wants to control the parameters of DC-SVM, 
please directly call the following matlab function: 

 [model] = dcsvm_core(trainy, trainX, num_cluster, level, tol, "mode", "method")
 
 Arguments:
 trainy       training labels, an n by 1 matrix.  
 trainX       training data, an n by d matrix, each row is a data point. 
 C            the balancing parameter in SVM
 kernel_parameters:   for Gaussian kernel, set kernel_parameters.gamma
                      for polynomial kernel, set kernel_parameters.gamma and kernel_parameters.degree
 numcluster   number of clusters
 level        total levels 
 level_stop   stopping level
 kk           size of branch
 tol          stopping tolerance for libsvm
 mode         0: dcsvm-early (default)    1: dcsvm (solving the exact kernel SVM problem)
 method       the clustering method, 
              0: kernel kmeans   1: kmeans (can only used for shift-invariant kernels)
 kernel       0: Gaussian kernel 1: polynomial kernel

=======================================
Parameter Selection by Cross Validation
=======================================

We also provide a cross validation procedure for parameter selection. 
The details are in demo_cv.m 
